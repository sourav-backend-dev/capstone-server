generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./db.sqlite"
}

model User {
  id           Int           @id @default(autoincrement())
  firstName    String
  lastName     String?
  googleId  String?
  email        String        @unique
  password     String?
  role         String        @default("user")
  membershipId Int?
  adminProfile AdminProfile?
  properties   Property[]    @relation("UserProperties")
  membership   Membership?   @relation(fields: [membershipId], references: [id])
}

model Membership {
  id               Int    @id @default(autoincrement())
  type             String
  price            Float
  durationInMonths Int
  users            User[]
}

model Property {
  id          Int       @id @default(autoincrement())
  title       String
  description String
  imageUrl    String    // Comma-separated URLs for property images
  length      Float     // Length of the property in meters
  breadth     Float     // Breadth of the property in meters
  city        String    // City where the property is located
  state       String    // State where the property is located
  pincode     String    // Pincode of the property
  price       Float     // Price of the property
  bedrooms    Int       // Number of bedrooms
  bathrooms   Int       // Number of bathrooms
  parking     Boolean   // Whether the property has parking
  furnished   Boolean   // Whether the property is furnished
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  sold        Boolean   @default(false) // Whether the property is sold
  soldAt      DateTime? // The date when the property was sold
  userId      Int       // Owner of the property
  user        User      @relation("UserProperties", fields: [userId], references: [id])
}


model AdminProfile {
  id          Int      @id @default(autoincrement())
  userId      Int      @unique
  permissions String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id])
}

model Contact {
  id        Int      @id @default(autoincrement())
  name      String
  email     String
  message   String
  createdAt DateTime @default(now())
}


model Appointment {
  id          Int      @id @default(autoincrement())
  title       String
  start       DateTime
  end         DateTime
  userName    String
  userMessage String
  createdAt   DateTime @default(now())
}
